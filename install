#!/usr/bin/env bash

set -e

#
# Make default dirs
#

if test ! -d "$HOME/dev"; then
  mkdir "$HOME/dev"
fi

if test ! -d "$HOME/Screenshots"; then
  mkdir "$HOME/Screenshots"
fi


#
# Global
#

echo "Use a dark menu bar / dock"
defaults write -g AppleInterfaceStyle Dark

echo "Disable the “Are you sure you want to open this application?” dialog"
defaults write com.apple.LaunchServices LSQuarantine -bool false

echo "Save screenshots to $HOME/screenshots"
defaults write com.apple.screencapture location -string "$HOME/screenshots"

echo "Set key repeat faster"
defaults write -g InitialKeyRepeat -int 15
defaults write -g KeyRepeat -int 1

echo "Expand save panel by default"
defaults write -g NSNavPanelExpandedStateForSaveMode -bool true
defaults write -g NSNavPanelExpandedStateForSaveMode2 -bool true

echo "Expand print panel by default"
defaults write -g PMPrintingExpandedStateForPrint -bool true
defaults write -g PMPrintingExpandedStateForPrint2 -bool true

echo "Enable full keyboard access for all controls"
defaults write -g AppleKeyboardUIMode -int 3

echo "Disable press-and-hold for keys in favor of key repeat"
defaults write -g ApplePressAndHoldEnabled -bool false

echo "Disable force click"
defaults write com.apple.AppleMultitouchTrackpad ForceSuppressed -int 1


#
# Finder
#

echo "Finder: show hidden files by default"
defaults write com.apple.finder AppleShowAllFiles -bool true

echo "Disable the warning when changing a file extension"
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

echo "Use column view in all Finder windows by default"
# Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv` `Nlsv`
defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

echo "Finder: show all filename extensions"
defaults write -g AppleShowAllExtensions -bool true

echo "Avoid creating .DS_Store files on network volumes"
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

echo "Show the ~/Library folder"
chflags nohidden ~/Library

echo "Prevent Time Machine from prompting to use new hard drives as backup volume"
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true


#
# Dock
#

echo "Set dock to the left of the screen, with autohide on and an delayed appearance"
defaults write com.apple.dock orientation -string left
defaults write com.apple.dock autohide -int 1
defaults write com.apple.dock tilesize -int 36;

echo "Remove all defaults from the dock"
defaults write com.apple.dock persistent-apps -array

echo "Minimize windows into their application’s icon"
defaults write com.apple.dock minimize-to-application -bool true


#
# Safari
#

echo "Prevent Safari from opening ‘safe’ files automatically after downloading"
defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

echo "Enable Safari’s debug menu"
defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

echo "Don't send search queries to Apple"
defaults write com.apple.Safari UniversalSearchEnabled -bool false

echo "Enable the Develop menu and the Web Inspector in Safari"
defaults write com.apple.Safari IncludeDevelopMenu -bool true
defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

echo "Set DuckDuckGo as the search engine"
defaults write -g NSPreferredWebServices '{
  NSWebServicesProviderWebSearch = {
    NSDefaultDisplayName = DuckDuckGo;
    NSProviderIdentifier = "com.duckduckgo";
  };
}'


#
# Text Edit
#

echo "Plain text for new files"
defaults write com.apple.TextEdit RichText -int 0

killall Safari
killall Finder
killall Dock


#
# Homebrew and apps
#

echo ""
echo "Now from appstore install:"
echo "Better Snap Tool"
echo "Slack"
echo ""
echo "Now from the internet install:"
echo "Chrome and Chrome Canary"
echo "Iterm2"
echo "Visual Studio Code"
echo "Firefox"
echo "GPG suite https://gpgtools.org/gpgsuite.html"
echo ""

if test ! $(which brew); then
    echo "Installing homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

PACKAGES=(
  coreutils
  diff-so-fancy
  findutils
  fzf
  git
  ripgrep-bin
  trash
  tree
  vim
  zsh
)

brew tap burntsushi/ripgrep https://github.com/BurntSushi/ripgrep.git

echo ""
echo "Installing homebrew packages"
brew install ${PACKAGES[@]}


#
# Repos I want cloned
#

echo ""
echo "Downloading stuff from my github"
echo ""

cd "$HOME/dev"
git clone https://github.com/supercrabtree/dotfiles.git
git clone https://github.com/supercrabtree/pure.git
git clone https://github.com/supercrabtree/k.git
git clone https://github.com/supercrabtree/bam-pow.git
git clone https://github.com/rupa/z.git
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
git clone https://github.com/paulirish/git-open.git
cd "$HOME"


#
# Symlink dotfiles
#

echo ""
echo "Symlinking dotfiles"
ln -s ~/dev/dotfiles/.zshrc .zshrc
ln -s ~/dev/dotfiles/.vimrc .vimrc
ln -s ~/dev/dotfiles/.gitconfig .gitconfig
ln -s ~/dev/dotfiles/.gitignore .gitignore


#
# sudo -------------------------------------------------------------------------
#


#
# Disable startup sound
#

echo "Disabling startup sound"
sudo nvram SystemAudioVolume=" "


#
# Choose ZSH
#

echo "Changing shell to zsh"
sudo sh -c "echo /usr/local/bin/zsh >> /etc/shells"
chsh -s /usr/local/bin/zsh
exec zsh
